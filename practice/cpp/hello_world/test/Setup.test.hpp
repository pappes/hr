////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
///	Copyright (C) 2018 by pappes
///
///	This file is part of the hw project.
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///	@file						CppProject/Setup.test.hpp
///	@author						pappes <pappes@gmail.com>
///	@date						9 Jun 2018

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Global.test.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace cppproject
{
namespace test
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace global
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::string						someGlobalString ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Environment : public testing::Environment
{

	public:

								Environment									(	const	std::string&				aCommandLineArg						)
								:	commandLineArg_(aCommandLineArg)
		{

			if (commandLineArg_ != "")
			{
				global::someGlobalString										=		commandLineArg_ ;
			}
			else
			{
				global::someGlobalString										=		"World" ;
			}
			
		}

		virtual					~Environment								( )
		{

		}
		
		virtual void			SetUp										( )
		{

		}
		
		virtual void			TearDown									( )
		{

		}

	private:

		std::string				commandLineArg_ ;

} ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////